// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TapiOamPmThresholdData tapi oam pm threshold data
// swagger:model tapi.oam.PmThresholdData
type TapiOamPmThresholdData struct {
	TapiCommonLocalClass

	// This attribute allows an PMThresholdData instance to be constrained to specific job types. If an PMThresholdData instance is so configured to be applicable to more than one job type (worst case ALL), only the parameters relevant for the job instance will be used (non-applicable profile parameters will be ignored)
	ApplicableJobType []string `json:"applicable-job-type"`

	// none
	GranularityPeriod *TapiCommonTimePeriod `json:"granularity-period,omitempty"`

	// none
	IsTransient *bool `json:"is-transient,omitempty"`

	// none
	ThresholdParameter []*TapiOamThresholdParameter `json:"threshold-parameter"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TapiOamPmThresholdData) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 TapiCommonLocalClass
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.TapiCommonLocalClass = aO0

	// AO1
	var dataAO1 struct {
		ApplicableJobType []string `json:"applicable-job-type"`

		GranularityPeriod *TapiCommonTimePeriod `json:"granularity-period,omitempty"`

		IsTransient *bool `json:"is-transient,omitempty"`

		ThresholdParameter []*TapiOamThresholdParameter `json:"threshold-parameter"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.ApplicableJobType = dataAO1.ApplicableJobType

	m.GranularityPeriod = dataAO1.GranularityPeriod

	m.IsTransient = dataAO1.IsTransient

	m.ThresholdParameter = dataAO1.ThresholdParameter

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TapiOamPmThresholdData) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.TapiCommonLocalClass)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		ApplicableJobType []string `json:"applicable-job-type"`

		GranularityPeriod *TapiCommonTimePeriod `json:"granularity-period,omitempty"`

		IsTransient *bool `json:"is-transient,omitempty"`

		ThresholdParameter []*TapiOamThresholdParameter `json:"threshold-parameter"`
	}

	dataAO1.ApplicableJobType = m.ApplicableJobType

	dataAO1.GranularityPeriod = m.GranularityPeriod

	dataAO1.IsTransient = m.IsTransient

	dataAO1.ThresholdParameter = m.ThresholdParameter

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this tapi oam pm threshold data
func (m *TapiOamPmThresholdData) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with TapiCommonLocalClass
	if err := m.TapiCommonLocalClass.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGranularityPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThresholdParameter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TapiOamPmThresholdData) validateGranularityPeriod(formats strfmt.Registry) error {

	if swag.IsZero(m.GranularityPeriod) { // not required
		return nil
	}

	if m.GranularityPeriod != nil {
		if err := m.GranularityPeriod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("granularity-period")
			}
			return err
		}
	}

	return nil
}

func (m *TapiOamPmThresholdData) validateThresholdParameter(formats strfmt.Registry) error {

	if swag.IsZero(m.ThresholdParameter) { // not required
		return nil
	}

	for i := 0; i < len(m.ThresholdParameter); i++ {
		if swag.IsZero(m.ThresholdParameter[i]) { // not required
			continue
		}

		if m.ThresholdParameter[i] != nil {
			if err := m.ThresholdParameter[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("threshold-parameter" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TapiOamPmThresholdData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TapiOamPmThresholdData) UnmarshalBinary(b []byte) error {
	var res TapiOamPmThresholdData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
