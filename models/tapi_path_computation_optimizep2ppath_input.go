// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TapiPathComputationOptimizep2ppathInput tapi path computation optimizep2ppath input
// swagger:model tapi.path.computation.optimizep2ppath.Input
type TapiPathComputationOptimizep2ppathInput struct {

	// none
	ObjectiveFunction *TapiPathComputationPathObjectiveFunction `json:"objective-function,omitempty"`

	// none
	OptimizationConstraint *TapiPathComputationPathOptimizationConstraint `json:"optimization-constraint,omitempty"`

	// none
	PathIDOrName string `json:"path-id-or-name,omitempty"`

	// none
	RoutingConstraint *TapiPathComputationRoutingConstraint `json:"routing-constraint,omitempty"`
}

// Validate validates this tapi path computation optimizep2ppath input
func (m *TapiPathComputationOptimizep2ppathInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateObjectiveFunction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptimizationConstraint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoutingConstraint(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TapiPathComputationOptimizep2ppathInput) validateObjectiveFunction(formats strfmt.Registry) error {

	if swag.IsZero(m.ObjectiveFunction) { // not required
		return nil
	}

	if m.ObjectiveFunction != nil {
		if err := m.ObjectiveFunction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objective-function")
			}
			return err
		}
	}

	return nil
}

func (m *TapiPathComputationOptimizep2ppathInput) validateOptimizationConstraint(formats strfmt.Registry) error {

	if swag.IsZero(m.OptimizationConstraint) { // not required
		return nil
	}

	if m.OptimizationConstraint != nil {
		if err := m.OptimizationConstraint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("optimization-constraint")
			}
			return err
		}
	}

	return nil
}

func (m *TapiPathComputationOptimizep2ppathInput) validateRoutingConstraint(formats strfmt.Registry) error {

	if swag.IsZero(m.RoutingConstraint) { // not required
		return nil
	}

	if m.RoutingConstraint != nil {
		if err := m.RoutingConstraint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("routing-constraint")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TapiPathComputationOptimizep2ppathInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TapiPathComputationOptimizep2ppathInput) UnmarshalBinary(b []byte) error {
	var res TapiPathComputationOptimizep2ppathInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
