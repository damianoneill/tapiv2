// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TapiPhotonicMediaOtsiTerminationPac tapi photonic media otsi termination pac
// swagger:model tapi.photonic.media.OtsiTerminationPac
type TapiPhotonicMediaOtsiTerminationPac struct {

	// Laser properties.
	LaserProperties *TapiPhotonicMediaLaserProperties `json:"laser-properties,omitempty"`

	// none
	ReceivedPower *TapiPhotonicMediaPowerProperties `json:"received-power,omitempty"`

	// This attribute indicates the selected Application Identifier that is used by the OCh trail termination function. The syntax of ApplicationIdentifier is a pair {ApplicationIdentifierType, PrintableString}. The value of ApplicationIdentifierType is either STANDARD or PROPRIETARY. The value of PrintableString represents the standard application code as defined in the ITU-T Recommendations or a vendor-specific proprietary code. If the ApplicationIdentifierType is STANDARD the value of PrintableString represents a standard application code as defined in the ITU-T Recommendations. If the ApplicationIdentifierType is PROPRIETARY, the first six characters of the PrintableString must contain the Hexadecimal representation of an OUI assigned to the vendor whose implementation generated the Application Identifier; the remaining octets of the PrintableString are unspecified. The value of this attribute of an object instance has to be one of the values identified in the attribute SupportableApplicationIdentifierList of the same object instance. The values and value ranges of the optical interface parameters of a standard application code must be consistent with those values specified in the ITU-T Recommendation for that application code.
	SelectedApplicationIdentifier *TapiPhotonicMediaApplicationIdentifier `json:"selected-application-identifier,omitempty"`

	// none
	SelectedCentralFrequency *TapiPhotonicMediaCentralFrequency `json:"selected-central-frequency,omitempty"`

	// This parameter defines the modulation used at the source
	SelectedModulation TapiPhotonicMediaSelectedModulation `json:"selected-modulation,omitempty"`

	// none
	SelectedSpectrum *TapiPhotonicMediaSpectrumBand `json:"selected-spectrum,omitempty"`

	// Measured power at the Transmitter.
	TransmitedPower *TapiPhotonicMediaPowerProperties `json:"transmited-power,omitempty"`
}

// Validate validates this tapi photonic media otsi termination pac
func (m *TapiPhotonicMediaOtsiTerminationPac) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLaserProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceivedPower(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelectedApplicationIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelectedCentralFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelectedModulation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelectedSpectrum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransmitedPower(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TapiPhotonicMediaOtsiTerminationPac) validateLaserProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.LaserProperties) { // not required
		return nil
	}

	if m.LaserProperties != nil {
		if err := m.LaserProperties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("laser-properties")
			}
			return err
		}
	}

	return nil
}

func (m *TapiPhotonicMediaOtsiTerminationPac) validateReceivedPower(formats strfmt.Registry) error {

	if swag.IsZero(m.ReceivedPower) { // not required
		return nil
	}

	if m.ReceivedPower != nil {
		if err := m.ReceivedPower.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("received-power")
			}
			return err
		}
	}

	return nil
}

func (m *TapiPhotonicMediaOtsiTerminationPac) validateSelectedApplicationIdentifier(formats strfmt.Registry) error {

	if swag.IsZero(m.SelectedApplicationIdentifier) { // not required
		return nil
	}

	if m.SelectedApplicationIdentifier != nil {
		if err := m.SelectedApplicationIdentifier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("selected-application-identifier")
			}
			return err
		}
	}

	return nil
}

func (m *TapiPhotonicMediaOtsiTerminationPac) validateSelectedCentralFrequency(formats strfmt.Registry) error {

	if swag.IsZero(m.SelectedCentralFrequency) { // not required
		return nil
	}

	if m.SelectedCentralFrequency != nil {
		if err := m.SelectedCentralFrequency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("selected-central-frequency")
			}
			return err
		}
	}

	return nil
}

func (m *TapiPhotonicMediaOtsiTerminationPac) validateSelectedModulation(formats strfmt.Registry) error {

	if swag.IsZero(m.SelectedModulation) { // not required
		return nil
	}

	if err := m.SelectedModulation.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("selected-modulation")
		}
		return err
	}

	return nil
}

func (m *TapiPhotonicMediaOtsiTerminationPac) validateSelectedSpectrum(formats strfmt.Registry) error {

	if swag.IsZero(m.SelectedSpectrum) { // not required
		return nil
	}

	if m.SelectedSpectrum != nil {
		if err := m.SelectedSpectrum.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("selected-spectrum")
			}
			return err
		}
	}

	return nil
}

func (m *TapiPhotonicMediaOtsiTerminationPac) validateTransmitedPower(formats strfmt.Registry) error {

	if swag.IsZero(m.TransmitedPower) { // not required
		return nil
	}

	if m.TransmitedPower != nil {
		if err := m.TransmitedPower.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transmited-power")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TapiPhotonicMediaOtsiTerminationPac) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TapiPhotonicMediaOtsiTerminationPac) UnmarshalBinary(b []byte) error {
	var res TapiPhotonicMediaOtsiTerminationPac
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
