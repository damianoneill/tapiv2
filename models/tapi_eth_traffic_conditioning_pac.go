// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TapiEthTrafficConditioningPac tapi eth traffic conditioning pac
// swagger:model tapi.eth.TrafficConditioningPac
type TapiEthTrafficConditioningPac struct {

	// This attribute indicates the direction of the conditioner. The value of true means that the conditioner (modeled as a TCS Sink according to G.8021) is associated with the sink part of the containing CTP. The value of false means that the conditioner (modeled as a TCS Sink according to G.8021) is associated with the source part of the containing CTP.
	Codirectional *bool `json:"codirectional,omitempty"`

	// This attribute indicates for the conditioner process the conditioning parameters:
	//                 - Queue ID: Indicates the Queue ID
	//                 - Committed Information Rate (CIR): number of bits per second
	//                 - Committed Burst Size (CBS): number of bytes
	//                 - Excess Information Rate (EIR): number of bits per second
	//                 - Excess Burst Size (EBS): number of bytes
	//                 - Coupling flag (CF): 0 or 1
	//                 - Color mode (CM): color-blind and color-aware.
	CondConfigList []*TapiEthTrafficConditioningConfiguration `json:"cond-config-list"`

	// This attribute indicates the Priority Splitter function for the mapping of the Ethernet frame priority (ETH_CI_P) values to the output queue.
	PrioConfigList []*TapiEthPriorityConfiguration `json:"prio-config-list"`
}

// Validate validates this tapi eth traffic conditioning pac
func (m *TapiEthTrafficConditioningPac) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCondConfigList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrioConfigList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TapiEthTrafficConditioningPac) validateCondConfigList(formats strfmt.Registry) error {

	if swag.IsZero(m.CondConfigList) { // not required
		return nil
	}

	for i := 0; i < len(m.CondConfigList); i++ {
		if swag.IsZero(m.CondConfigList[i]) { // not required
			continue
		}

		if m.CondConfigList[i] != nil {
			if err := m.CondConfigList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cond-config-list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TapiEthTrafficConditioningPac) validatePrioConfigList(formats strfmt.Registry) error {

	if swag.IsZero(m.PrioConfigList) { // not required
		return nil
	}

	for i := 0; i < len(m.PrioConfigList); i++ {
		if swag.IsZero(m.PrioConfigList[i]) { // not required
			continue
		}

		if m.PrioConfigList[i] != nil {
			if err := m.PrioConfigList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("prio-config-list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TapiEthTrafficConditioningPac) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TapiEthTrafficConditioningPac) UnmarshalBinary(b []byte) error {
	var res TapiEthTrafficConditioningPac
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
