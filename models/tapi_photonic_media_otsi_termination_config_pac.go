// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TapiPhotonicMediaOtsiTerminationConfigPac tapi photonic media otsi termination config pac
// swagger:model tapi.photonic.media.OtsiTerminationConfigPac
type TapiPhotonicMediaOtsiTerminationConfigPac struct {

	// This attribute indicates the selected Application Identifier.
	ApplicationIdentifier *TapiPhotonicMediaApplicationIdentifier `json:"application-identifier,omitempty"`

	// The central frequency of the laser. It is the oscillation frequency of the corresponding electromagnetic wave
	CentralFrequency *TapiPhotonicMediaCentralFrequency `json:"central-frequency,omitempty"`

	// Laser control can be FORCED-ON, FORCED-OFF or LASER-SHUTDOWN
	LaserControl TapiPhotonicMediaLaserControlType `json:"laser-control,omitempty"`

	// The modulation techniqu selected at the source.
	Modulation TapiPhotonicMediaModulationTechnique `json:"modulation,omitempty"`

	// none
	Spectrum *TapiPhotonicMediaSpectrumBand `json:"spectrum,omitempty"`

	// Allows to configure the Lowerpower threshold which is expected to be different from Default, but within the Min and Max values specified as OTSi SIP capability.
	TotalPowerWarnThresholdLower string `json:"total-power-warn-threshold-lower,omitempty"`

	// Allows to configure the Upper power threshold which is expected to be different from Default, but within the Min and Max values specified as OTSi SIP capability.
	TotalPowerWarnThresholdUpper string `json:"total-power-warn-threshold-upper,omitempty"`

	// Transmit power as requested.
	TransmitPower *TapiPhotonicMediaPowerProperties `json:"transmit-power,omitempty"`
}

// Validate validates this tapi photonic media otsi termination config pac
func (m *TapiPhotonicMediaOtsiTerminationConfigPac) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCentralFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLaserControl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModulation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpectrum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransmitPower(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TapiPhotonicMediaOtsiTerminationConfigPac) validateApplicationIdentifier(formats strfmt.Registry) error {

	if swag.IsZero(m.ApplicationIdentifier) { // not required
		return nil
	}

	if m.ApplicationIdentifier != nil {
		if err := m.ApplicationIdentifier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("application-identifier")
			}
			return err
		}
	}

	return nil
}

func (m *TapiPhotonicMediaOtsiTerminationConfigPac) validateCentralFrequency(formats strfmt.Registry) error {

	if swag.IsZero(m.CentralFrequency) { // not required
		return nil
	}

	if m.CentralFrequency != nil {
		if err := m.CentralFrequency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("central-frequency")
			}
			return err
		}
	}

	return nil
}

func (m *TapiPhotonicMediaOtsiTerminationConfigPac) validateLaserControl(formats strfmt.Registry) error {

	if swag.IsZero(m.LaserControl) { // not required
		return nil
	}

	if err := m.LaserControl.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("laser-control")
		}
		return err
	}

	return nil
}

func (m *TapiPhotonicMediaOtsiTerminationConfigPac) validateModulation(formats strfmt.Registry) error {

	if swag.IsZero(m.Modulation) { // not required
		return nil
	}

	if err := m.Modulation.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("modulation")
		}
		return err
	}

	return nil
}

func (m *TapiPhotonicMediaOtsiTerminationConfigPac) validateSpectrum(formats strfmt.Registry) error {

	if swag.IsZero(m.Spectrum) { // not required
		return nil
	}

	if m.Spectrum != nil {
		if err := m.Spectrum.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("spectrum")
			}
			return err
		}
	}

	return nil
}

func (m *TapiPhotonicMediaOtsiTerminationConfigPac) validateTransmitPower(formats strfmt.Registry) error {

	if swag.IsZero(m.TransmitPower) { // not required
		return nil
	}

	if m.TransmitPower != nil {
		if err := m.TransmitPower.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transmit-power")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TapiPhotonicMediaOtsiTerminationConfigPac) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TapiPhotonicMediaOtsiTerminationConfigPac) UnmarshalBinary(b []byte) error {
	var res TapiPhotonicMediaOtsiTerminationConfigPac
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
