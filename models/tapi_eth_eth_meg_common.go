// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TapiEthEthMegCommon tapi eth eth meg common
// swagger:model tapi.eth.EthMegCommon
type TapiEthEthMegCommon struct {

	// This attribute models the MI_CC_Period signal defined in G.8021 and configured as specified in G8051.
	//                 It is the period at which the CCM message should be sent.
	//                 Default values are: 3.33 ms for PS, 100 ms for PM, 1 s for FM.
	//                 ITU-T G.8013/Y.1731 (2015)/Amd.1 (11/2018): The ETH-CC transmission period is the same for all MEPs in the MEG.
	CcPeriod TapiEthOamPeriod `json:"cc-period,omitempty"`

	// none
	ClientMel int32 `json:"client-mel,omitempty"`

	// This attribute models the MI_CC_Enable signal defined in G.8021 and configured as specified in G8051.
	//                 ITU-T G.8013/Y.1731 (2015)/Amd.1 (11/2018): When ETH-CC transmission is enabled in a MEG,
	//                 all MEPs are enabled to periodically transmit frames with ETH-CC information to their peer MEPs in the MEG.
	IsCcEnabled *bool `json:"is-cc-enabled,omitempty"`

	// Optional in case 802.1Q maintenanceAssociationName is used.
	MegIdentifier string `json:"meg-identifier,omitempty"`

	// none
	MegLevel int32 `json:"meg-level,omitempty"`
}

// Validate validates this tapi eth eth meg common
func (m *TapiEthEthMegCommon) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCcPeriod(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TapiEthEthMegCommon) validateCcPeriod(formats strfmt.Registry) error {

	if swag.IsZero(m.CcPeriod) { // not required
		return nil
	}

	if err := m.CcPeriod.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("cc-period")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TapiEthEthMegCommon) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TapiEthEthMegCommon) UnmarshalBinary(b []byte) error {
	var res TapiEthEthMegCommon
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
