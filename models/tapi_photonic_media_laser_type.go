// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// TapiPhotonicMediaLaserType tapi photonic media laser type
// swagger:model tapi.photonic.media.LaserType
type TapiPhotonicMediaLaserType string

const (

	// TapiPhotonicMediaLaserTypePUMP captures enum value "PUMP"
	TapiPhotonicMediaLaserTypePUMP TapiPhotonicMediaLaserType = "PUMP"

	// TapiPhotonicMediaLaserTypeMODULATED captures enum value "MODULATED"
	TapiPhotonicMediaLaserTypeMODULATED TapiPhotonicMediaLaserType = "MODULATED"

	// TapiPhotonicMediaLaserTypePULSE captures enum value "PULSE"
	TapiPhotonicMediaLaserTypePULSE TapiPhotonicMediaLaserType = "PULSE"
)

// for schema
var tapiPhotonicMediaLaserTypeEnum []interface{}

func init() {
	var res []TapiPhotonicMediaLaserType
	if err := json.Unmarshal([]byte(`["PUMP","MODULATED","PULSE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tapiPhotonicMediaLaserTypeEnum = append(tapiPhotonicMediaLaserTypeEnum, v)
	}
}

func (m TapiPhotonicMediaLaserType) validateTapiPhotonicMediaLaserTypeEnum(path, location string, value TapiPhotonicMediaLaserType) error {
	if err := validate.Enum(path, location, value, tapiPhotonicMediaLaserTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this tapi photonic media laser type
func (m TapiPhotonicMediaLaserType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTapiPhotonicMediaLaserTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
