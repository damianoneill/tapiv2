// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// TapiPhotonicMediaLaserControlType tapi photonic media laser control type
// swagger:model tapi.photonic.media.LaserControlType
type TapiPhotonicMediaLaserControlType string

const (

	// TapiPhotonicMediaLaserControlTypeFORCEDON captures enum value "FORCED-ON"
	TapiPhotonicMediaLaserControlTypeFORCEDON TapiPhotonicMediaLaserControlType = "FORCED-ON"

	// TapiPhotonicMediaLaserControlTypeFORCEDOFF captures enum value "FORCED-OFF"
	TapiPhotonicMediaLaserControlTypeFORCEDOFF TapiPhotonicMediaLaserControlType = "FORCED-OFF"

	// TapiPhotonicMediaLaserControlTypeAUTOMATICLASERSHUTDOWN captures enum value "AUTOMATIC-LASER-SHUTDOWN"
	TapiPhotonicMediaLaserControlTypeAUTOMATICLASERSHUTDOWN TapiPhotonicMediaLaserControlType = "AUTOMATIC-LASER-SHUTDOWN"

	// TapiPhotonicMediaLaserControlTypeUNDEFINED captures enum value "UNDEFINED"
	TapiPhotonicMediaLaserControlTypeUNDEFINED TapiPhotonicMediaLaserControlType = "UNDEFINED"
)

// for schema
var tapiPhotonicMediaLaserControlTypeEnum []interface{}

func init() {
	var res []TapiPhotonicMediaLaserControlType
	if err := json.Unmarshal([]byte(`["FORCED-ON","FORCED-OFF","AUTOMATIC-LASER-SHUTDOWN","UNDEFINED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tapiPhotonicMediaLaserControlTypeEnum = append(tapiPhotonicMediaLaserControlTypeEnum, v)
	}
}

func (m TapiPhotonicMediaLaserControlType) validateTapiPhotonicMediaLaserControlTypeEnum(path, location string, value TapiPhotonicMediaLaserControlType) error {
	if err := validate.Enum(path, location, value, tapiPhotonicMediaLaserControlTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this tapi photonic media laser control type
func (m TapiPhotonicMediaLaserControlType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTapiPhotonicMediaLaserControlTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
