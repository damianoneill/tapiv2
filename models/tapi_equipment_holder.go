// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TapiEquipmentHolder tapi equipment holder
// swagger:model tapi.equipment.Holder
type TapiEquipmentHolder struct {
	TapiCommonGlobalClass

	// none
	ActualHolder *TapiEquipmentActualHolder `json:"actual-holder,omitempty"`

	// none
	ExpectedHolder *TapiEquipmentExpectedHolder `json:"expected-holder,omitempty"`

	// The FRU that is occupying the holder.
	//                 A holder may be unoccupied.
	//                 An FRU may occupy more hat one holder (using or blocking are intentionally not distinguished here).
	OccupyingFru *TapiEquipmentEquipmentRef `json:"occupying-fru,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TapiEquipmentHolder) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 TapiCommonGlobalClass
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.TapiCommonGlobalClass = aO0

	// AO1
	var dataAO1 struct {
		ActualHolder *TapiEquipmentActualHolder `json:"actual-holder,omitempty"`

		ExpectedHolder *TapiEquipmentExpectedHolder `json:"expected-holder,omitempty"`

		OccupyingFru *TapiEquipmentEquipmentRef `json:"occupying-fru,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.ActualHolder = dataAO1.ActualHolder

	m.ExpectedHolder = dataAO1.ExpectedHolder

	m.OccupyingFru = dataAO1.OccupyingFru

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TapiEquipmentHolder) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.TapiCommonGlobalClass)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		ActualHolder *TapiEquipmentActualHolder `json:"actual-holder,omitempty"`

		ExpectedHolder *TapiEquipmentExpectedHolder `json:"expected-holder,omitempty"`

		OccupyingFru *TapiEquipmentEquipmentRef `json:"occupying-fru,omitempty"`
	}

	dataAO1.ActualHolder = m.ActualHolder

	dataAO1.ExpectedHolder = m.ExpectedHolder

	dataAO1.OccupyingFru = m.OccupyingFru

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this tapi equipment holder
func (m *TapiEquipmentHolder) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with TapiCommonGlobalClass
	if err := m.TapiCommonGlobalClass.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActualHolder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpectedHolder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOccupyingFru(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TapiEquipmentHolder) validateActualHolder(formats strfmt.Registry) error {

	if swag.IsZero(m.ActualHolder) { // not required
		return nil
	}

	if m.ActualHolder != nil {
		if err := m.ActualHolder.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actual-holder")
			}
			return err
		}
	}

	return nil
}

func (m *TapiEquipmentHolder) validateExpectedHolder(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpectedHolder) { // not required
		return nil
	}

	if m.ExpectedHolder != nil {
		if err := m.ExpectedHolder.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("expected-holder")
			}
			return err
		}
	}

	return nil
}

func (m *TapiEquipmentHolder) validateOccupyingFru(formats strfmt.Registry) error {

	if swag.IsZero(m.OccupyingFru) { // not required
		return nil
	}

	if m.OccupyingFru != nil {
		if err := m.OccupyingFru.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("occupying-fru")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TapiEquipmentHolder) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TapiEquipmentHolder) UnmarshalBinary(b []byte) error {
	var res TapiEquipmentHolder
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
