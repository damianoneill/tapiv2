// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TapiPhotonicMediaLaserProperties tapi photonic media laser properties
// swagger:model tapi.photonic.media.LaserProperties
type TapiPhotonicMediaLaserProperties struct {

	// The type of laser, its operational wavelengths, and its applications. String size 255.
	LaserApplicationType TapiPhotonicMediaLaserType `json:"laser-application-type,omitempty"`

	// The Bias current of the laser that is the medium polarization current of the laser.
	LaserBiasCurrent string `json:"laser-bias-current,omitempty"`

	// none
	LaserStatus TapiPhotonicMediaLaserControlStatusType `json:"laser-status,omitempty"`

	// The temperature of the laser
	LaserTemperature string `json:"laser-temperature,omitempty"`
}

// Validate validates this tapi photonic media laser properties
func (m *TapiPhotonicMediaLaserProperties) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLaserApplicationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLaserStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TapiPhotonicMediaLaserProperties) validateLaserApplicationType(formats strfmt.Registry) error {

	if swag.IsZero(m.LaserApplicationType) { // not required
		return nil
	}

	if err := m.LaserApplicationType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("laser-application-type")
		}
		return err
	}

	return nil
}

func (m *TapiPhotonicMediaLaserProperties) validateLaserStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.LaserStatus) { // not required
		return nil
	}

	if err := m.LaserStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("laser-status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TapiPhotonicMediaLaserProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TapiPhotonicMediaLaserProperties) UnmarshalBinary(b []byte) error {
	var res TapiPhotonicMediaLaserProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
