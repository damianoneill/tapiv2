// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TapiTopologyNodeNodeEdgePoint tapi topology node node edge point
// swagger:model tapi.topology.node.NodeEdgePoint
type TapiTopologyNodeNodeEdgePoint struct {
	TapiConnectivityNodeEdgePointAugmentation3

	TapiEquipmentNodeEdgePointAugmentation1

	TapiOduNodeEdgePointAugmentation4

	TapiPhotonicMediaNodeEdgePointAugmentation2

	TapiTopologyNodeEdgePoint
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TapiTopologyNodeNodeEdgePoint) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 TapiConnectivityNodeEdgePointAugmentation3
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.TapiConnectivityNodeEdgePointAugmentation3 = aO0

	// AO1
	var aO1 TapiEquipmentNodeEdgePointAugmentation1
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.TapiEquipmentNodeEdgePointAugmentation1 = aO1

	// AO2
	var aO2 TapiOduNodeEdgePointAugmentation4
	if err := swag.ReadJSON(raw, &aO2); err != nil {
		return err
	}
	m.TapiOduNodeEdgePointAugmentation4 = aO2

	// AO3
	var aO3 TapiPhotonicMediaNodeEdgePointAugmentation2
	if err := swag.ReadJSON(raw, &aO3); err != nil {
		return err
	}
	m.TapiPhotonicMediaNodeEdgePointAugmentation2 = aO3

	// AO4
	var aO4 TapiTopologyNodeEdgePoint
	if err := swag.ReadJSON(raw, &aO4); err != nil {
		return err
	}
	m.TapiTopologyNodeEdgePoint = aO4

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TapiTopologyNodeNodeEdgePoint) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 5)

	aO0, err := swag.WriteJSON(m.TapiConnectivityNodeEdgePointAugmentation3)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.TapiEquipmentNodeEdgePointAugmentation1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	aO2, err := swag.WriteJSON(m.TapiOduNodeEdgePointAugmentation4)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO2)

	aO3, err := swag.WriteJSON(m.TapiPhotonicMediaNodeEdgePointAugmentation2)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO3)

	aO4, err := swag.WriteJSON(m.TapiTopologyNodeEdgePoint)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO4)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this tapi topology node node edge point
func (m *TapiTopologyNodeNodeEdgePoint) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with TapiConnectivityNodeEdgePointAugmentation3
	if err := m.TapiConnectivityNodeEdgePointAugmentation3.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with TapiEquipmentNodeEdgePointAugmentation1
	if err := m.TapiEquipmentNodeEdgePointAugmentation1.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with TapiOduNodeEdgePointAugmentation4
	if err := m.TapiOduNodeEdgePointAugmentation4.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with TapiPhotonicMediaNodeEdgePointAugmentation2
	if err := m.TapiPhotonicMediaNodeEdgePointAugmentation2.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with TapiTopologyNodeEdgePoint
	if err := m.TapiTopologyNodeEdgePoint.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *TapiTopologyNodeNodeEdgePoint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TapiTopologyNodeNodeEdgePoint) UnmarshalBinary(b []byte) error {
	var res TapiTopologyNodeNodeEdgePoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
