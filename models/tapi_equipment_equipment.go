// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TapiEquipmentEquipment tapi equipment equipment
// swagger:model tapi.equipment.Equipment
type TapiEquipmentEquipment struct {
	TapiCommonGlobalClass

	// none
	ActualEquipment *TapiEquipmentActualEquipment `json:"actual-equipment,omitempty"`

	// This attribute provides the identifier for the form of equipments regarded as having particular shared characteristics.
	Category string `json:"category,omitempty"`

	// References the Holder in an Equipment that is available to take other Equipments.
	//                 For example:
	//                 - Slot in a sub-rack
	//                 - Slot in a Field Replaceable Unit that can take a small form-factor pluggable.
	ContainedHolder []*TapiEquipmentHolder `json:"contained-holder"`

	// none
	EquipmentLocation string `json:"equipment-location,omitempty"`

	// none
	ExpectedEquipment []*TapiEquipmentExpectedEquipment `json:"expected-equipment"`

	// none
	GeographicalLocation string `json:"geographical-location,omitempty"`

	// none
	IsExpectedActualMismatch *bool `json:"is-expected-actual-mismatch,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TapiEquipmentEquipment) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 TapiCommonGlobalClass
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.TapiCommonGlobalClass = aO0

	// AO1
	var dataAO1 struct {
		ActualEquipment *TapiEquipmentActualEquipment `json:"actual-equipment,omitempty"`

		Category string `json:"category,omitempty"`

		ContainedHolder []*TapiEquipmentHolder `json:"contained-holder"`

		EquipmentLocation string `json:"equipment-location,omitempty"`

		ExpectedEquipment []*TapiEquipmentExpectedEquipment `json:"expected-equipment"`

		GeographicalLocation string `json:"geographical-location,omitempty"`

		IsExpectedActualMismatch *bool `json:"is-expected-actual-mismatch,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.ActualEquipment = dataAO1.ActualEquipment

	m.Category = dataAO1.Category

	m.ContainedHolder = dataAO1.ContainedHolder

	m.EquipmentLocation = dataAO1.EquipmentLocation

	m.ExpectedEquipment = dataAO1.ExpectedEquipment

	m.GeographicalLocation = dataAO1.GeographicalLocation

	m.IsExpectedActualMismatch = dataAO1.IsExpectedActualMismatch

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TapiEquipmentEquipment) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.TapiCommonGlobalClass)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		ActualEquipment *TapiEquipmentActualEquipment `json:"actual-equipment,omitempty"`

		Category string `json:"category,omitempty"`

		ContainedHolder []*TapiEquipmentHolder `json:"contained-holder"`

		EquipmentLocation string `json:"equipment-location,omitempty"`

		ExpectedEquipment []*TapiEquipmentExpectedEquipment `json:"expected-equipment"`

		GeographicalLocation string `json:"geographical-location,omitempty"`

		IsExpectedActualMismatch *bool `json:"is-expected-actual-mismatch,omitempty"`
	}

	dataAO1.ActualEquipment = m.ActualEquipment

	dataAO1.Category = m.Category

	dataAO1.ContainedHolder = m.ContainedHolder

	dataAO1.EquipmentLocation = m.EquipmentLocation

	dataAO1.ExpectedEquipment = m.ExpectedEquipment

	dataAO1.GeographicalLocation = m.GeographicalLocation

	dataAO1.IsExpectedActualMismatch = m.IsExpectedActualMismatch

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this tapi equipment equipment
func (m *TapiEquipmentEquipment) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with TapiCommonGlobalClass
	if err := m.TapiCommonGlobalClass.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActualEquipment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContainedHolder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpectedEquipment(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TapiEquipmentEquipment) validateActualEquipment(formats strfmt.Registry) error {

	if swag.IsZero(m.ActualEquipment) { // not required
		return nil
	}

	if m.ActualEquipment != nil {
		if err := m.ActualEquipment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actual-equipment")
			}
			return err
		}
	}

	return nil
}

func (m *TapiEquipmentEquipment) validateContainedHolder(formats strfmt.Registry) error {

	if swag.IsZero(m.ContainedHolder) { // not required
		return nil
	}

	for i := 0; i < len(m.ContainedHolder); i++ {
		if swag.IsZero(m.ContainedHolder[i]) { // not required
			continue
		}

		if m.ContainedHolder[i] != nil {
			if err := m.ContainedHolder[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("contained-holder" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TapiEquipmentEquipment) validateExpectedEquipment(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpectedEquipment) { // not required
		return nil
	}

	for i := 0; i < len(m.ExpectedEquipment); i++ {
		if swag.IsZero(m.ExpectedEquipment[i]) { // not required
			continue
		}

		if m.ExpectedEquipment[i] != nil {
			if err := m.ExpectedEquipment[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("expected-equipment" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TapiEquipmentEquipment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TapiEquipmentEquipment) UnmarshalBinary(b []byte) error {
	var res TapiEquipmentEquipment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
