// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TapiEthEthConnectionEndPointSpec tapi eth eth connection end point spec
// swagger:model tapi.eth.EthConnectionEndPointSpec
type TapiEthEthConnectionEndPointSpec struct {

	// none
	EthCtp *TapiEthEthCtpPac `json:"eth-ctp,omitempty"`

	// none
	EthTerm *TapiEthEthTerminationPac `json:"eth-term,omitempty"`

	// none
	EtyTerm *TapiEthEtyTerminationPac `json:"ety-term,omitempty"`
}

// Validate validates this tapi eth eth connection end point spec
func (m *TapiEthEthConnectionEndPointSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEthCtp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEthTerm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEtyTerm(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TapiEthEthConnectionEndPointSpec) validateEthCtp(formats strfmt.Registry) error {

	if swag.IsZero(m.EthCtp) { // not required
		return nil
	}

	if m.EthCtp != nil {
		if err := m.EthCtp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eth-ctp")
			}
			return err
		}
	}

	return nil
}

func (m *TapiEthEthConnectionEndPointSpec) validateEthTerm(formats strfmt.Registry) error {

	if swag.IsZero(m.EthTerm) { // not required
		return nil
	}

	if m.EthTerm != nil {
		if err := m.EthTerm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eth-term")
			}
			return err
		}
	}

	return nil
}

func (m *TapiEthEthConnectionEndPointSpec) validateEtyTerm(formats strfmt.Registry) error {

	if swag.IsZero(m.EtyTerm) { // not required
		return nil
	}

	if m.EtyTerm != nil {
		if err := m.EtyTerm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ety-term")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TapiEthEthConnectionEndPointSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TapiEthEthConnectionEndPointSpec) UnmarshalBinary(b []byte) error {
	var res TapiEthEthConnectionEndPointSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
