// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TapiOamPmDataPac tapi oam pm data pac
// swagger:model tapi.oam.PmDataPac
type TapiOamPmDataPac struct {

	// none
	GranularityPeriod *TapiCommonTimePeriod `json:"granularity-period,omitempty"`

	// This attribute is used to indicate that the performance data for the current period may not be reliable. Some reasons for this to occur are:
	//                 – Suspect data were detected by the actual resource doing data collection.
	//                 – Transition of the administrativeState attribute to/from the 'lock' state.
	//                 – Transition of the operationalState to/from the 'disabled' state.
	//                 – Scheduler setting that inhibits the collection function.
	//                 – The performance counters were reset during the interval.
	//                 – The currentData (or subclass) object instance was created during the monitoring period.
	SuspectIntervalFlag *bool `json:"suspect-interval-flag,omitempty"`
}

// Validate validates this tapi oam pm data pac
func (m *TapiOamPmDataPac) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGranularityPeriod(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TapiOamPmDataPac) validateGranularityPeriod(formats strfmt.Registry) error {

	if swag.IsZero(m.GranularityPeriod) { // not required
		return nil
	}

	if m.GranularityPeriod != nil {
		if err := m.GranularityPeriod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("granularity-period")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TapiOamPmDataPac) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TapiOamPmDataPac) UnmarshalBinary(b []byte) error {
	var res TapiOamPmDataPac
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
