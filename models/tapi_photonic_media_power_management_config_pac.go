// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TapiPhotonicMediaPowerManagementConfigPac tapi photonic media power management config pac
// swagger:model tapi.photonic.media.PowerManagementConfigPac
type TapiPhotonicMediaPowerManagementConfigPac struct {

	// This parameter shall be used to specify the maximum input power
	//                 being received at the Logical-Termination-Point (LTP) associated to the CSEP.
	ExpectedMaximumInputPower *TapiPhotonicMediaPowerProperties `json:"expected-maximum-input-power,omitempty"`

	// This parameter shall be used to specify the minimum input power
	//                 being received at the Logical-Termination-Point (LTP) associated to the CSEP.
	ExpectedMinimumInputPower *TapiPhotonicMediaPowerProperties `json:"expected-minimum-input-power,omitempty"`

	// This parameter shall be used to specify the maximum output power
	//                 desired at the Logical-Termination-Point (LTP) associated to the CSEP.
	IntendedMaximumOutputPower *TapiPhotonicMediaPowerProperties `json:"intended-maximum-output-power,omitempty"`

	// This parameter shall be used to specify the minimum output power
	//                 desired at the Logical-Termination-Point (LTP) associated to the CSEP.
	IntendedMinimumOutputPower *TapiPhotonicMediaPowerProperties `json:"intended-minimum-output-power,omitempty"`
}

// Validate validates this tapi photonic media power management config pac
func (m *TapiPhotonicMediaPowerManagementConfigPac) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpectedMaximumInputPower(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpectedMinimumInputPower(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntendedMaximumOutputPower(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntendedMinimumOutputPower(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TapiPhotonicMediaPowerManagementConfigPac) validateExpectedMaximumInputPower(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpectedMaximumInputPower) { // not required
		return nil
	}

	if m.ExpectedMaximumInputPower != nil {
		if err := m.ExpectedMaximumInputPower.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("expected-maximum-input-power")
			}
			return err
		}
	}

	return nil
}

func (m *TapiPhotonicMediaPowerManagementConfigPac) validateExpectedMinimumInputPower(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpectedMinimumInputPower) { // not required
		return nil
	}

	if m.ExpectedMinimumInputPower != nil {
		if err := m.ExpectedMinimumInputPower.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("expected-minimum-input-power")
			}
			return err
		}
	}

	return nil
}

func (m *TapiPhotonicMediaPowerManagementConfigPac) validateIntendedMaximumOutputPower(formats strfmt.Registry) error {

	if swag.IsZero(m.IntendedMaximumOutputPower) { // not required
		return nil
	}

	if m.IntendedMaximumOutputPower != nil {
		if err := m.IntendedMaximumOutputPower.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("intended-maximum-output-power")
			}
			return err
		}
	}

	return nil
}

func (m *TapiPhotonicMediaPowerManagementConfigPac) validateIntendedMinimumOutputPower(formats strfmt.Registry) error {

	if swag.IsZero(m.IntendedMinimumOutputPower) { // not required
		return nil
	}

	if m.IntendedMinimumOutputPower != nil {
		if err := m.IntendedMinimumOutputPower.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("intended-minimum-output-power")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TapiPhotonicMediaPowerManagementConfigPac) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TapiPhotonicMediaPowerManagementConfigPac) UnmarshalBinary(b []byte) error {
	var res TapiPhotonicMediaPowerManagementConfigPac
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
