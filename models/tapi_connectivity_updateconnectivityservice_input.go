// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TapiConnectivityUpdateconnectivityserviceInput tapi connectivity updateconnectivityservice input
// swagger:model tapi.connectivity.updateconnectivityservice.Input
type TapiConnectivityUpdateconnectivityserviceInput struct {

	// none
	ConnectivityConstraint *TapiConnectivityConnectivityConstraint `json:"connectivity-constraint,omitempty"`

	// none
	EndPoint []*TapiConnectivityCreateconnectivityserviceInputEndPoint `json:"end-point"`

	// none
	ResilienceConstraint *TapiConnectivityResilienceConstraint `json:"resilience-constraint,omitempty"`

	// none
	RoutingConstraint *TapiPathComputationRoutingConstraint `json:"routing-constraint,omitempty"`

	// none
	ServiceIDOrName string `json:"service-id-or-name,omitempty"`

	// none
	State TapiCommonAdministrativeState `json:"state,omitempty"`

	// none
	TopologyConstraint []*TapiPathComputationTopologyConstraint `json:"topology-constraint"`
}

// Validate validates this tapi connectivity updateconnectivityservice input
func (m *TapiConnectivityUpdateconnectivityserviceInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnectivityConstraint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndPoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResilienceConstraint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoutingConstraint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTopologyConstraint(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TapiConnectivityUpdateconnectivityserviceInput) validateConnectivityConstraint(formats strfmt.Registry) error {

	if swag.IsZero(m.ConnectivityConstraint) { // not required
		return nil
	}

	if m.ConnectivityConstraint != nil {
		if err := m.ConnectivityConstraint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connectivity-constraint")
			}
			return err
		}
	}

	return nil
}

func (m *TapiConnectivityUpdateconnectivityserviceInput) validateEndPoint(formats strfmt.Registry) error {

	if swag.IsZero(m.EndPoint) { // not required
		return nil
	}

	for i := 0; i < len(m.EndPoint); i++ {
		if swag.IsZero(m.EndPoint[i]) { // not required
			continue
		}

		if m.EndPoint[i] != nil {
			if err := m.EndPoint[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("end-point" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TapiConnectivityUpdateconnectivityserviceInput) validateResilienceConstraint(formats strfmt.Registry) error {

	if swag.IsZero(m.ResilienceConstraint) { // not required
		return nil
	}

	if m.ResilienceConstraint != nil {
		if err := m.ResilienceConstraint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resilience-constraint")
			}
			return err
		}
	}

	return nil
}

func (m *TapiConnectivityUpdateconnectivityserviceInput) validateRoutingConstraint(formats strfmt.Registry) error {

	if swag.IsZero(m.RoutingConstraint) { // not required
		return nil
	}

	if m.RoutingConstraint != nil {
		if err := m.RoutingConstraint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("routing-constraint")
			}
			return err
		}
	}

	return nil
}

func (m *TapiConnectivityUpdateconnectivityserviceInput) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	if err := m.State.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("state")
		}
		return err
	}

	return nil
}

func (m *TapiConnectivityUpdateconnectivityserviceInput) validateTopologyConstraint(formats strfmt.Registry) error {

	if swag.IsZero(m.TopologyConstraint) { // not required
		return nil
	}

	for i := 0; i < len(m.TopologyConstraint); i++ {
		if swag.IsZero(m.TopologyConstraint[i]) { // not required
			continue
		}

		if m.TopologyConstraint[i] != nil {
			if err := m.TopologyConstraint[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("topology-constraint" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TapiConnectivityUpdateconnectivityserviceInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TapiConnectivityUpdateconnectivityserviceInput) UnmarshalBinary(b []byte) error {
	var res TapiConnectivityUpdateconnectivityserviceInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
