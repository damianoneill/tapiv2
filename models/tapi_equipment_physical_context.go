// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TapiEquipmentPhysicalContext tapi equipment physical context
// swagger:model tapi.equipment.PhysicalContext
type TapiEquipmentPhysicalContext struct {
	TapiCommonGlobalClass

	// none
	Device []*TapiEquipmentDevice `json:"device"`

	// none
	PhysicalSpan []*TapiEquipmentPhysicalSpan `json:"physical-span"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TapiEquipmentPhysicalContext) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 TapiCommonGlobalClass
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.TapiCommonGlobalClass = aO0

	// AO1
	var dataAO1 struct {
		Device []*TapiEquipmentDevice `json:"device"`

		PhysicalSpan []*TapiEquipmentPhysicalSpan `json:"physical-span"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Device = dataAO1.Device

	m.PhysicalSpan = dataAO1.PhysicalSpan

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TapiEquipmentPhysicalContext) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.TapiCommonGlobalClass)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		Device []*TapiEquipmentDevice `json:"device"`

		PhysicalSpan []*TapiEquipmentPhysicalSpan `json:"physical-span"`
	}

	dataAO1.Device = m.Device

	dataAO1.PhysicalSpan = m.PhysicalSpan

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this tapi equipment physical context
func (m *TapiEquipmentPhysicalContext) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with TapiCommonGlobalClass
	if err := m.TapiCommonGlobalClass.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhysicalSpan(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TapiEquipmentPhysicalContext) validateDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.Device) { // not required
		return nil
	}

	for i := 0; i < len(m.Device); i++ {
		if swag.IsZero(m.Device[i]) { // not required
			continue
		}

		if m.Device[i] != nil {
			if err := m.Device[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("device" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TapiEquipmentPhysicalContext) validatePhysicalSpan(formats strfmt.Registry) error {

	if swag.IsZero(m.PhysicalSpan) { // not required
		return nil
	}

	for i := 0; i < len(m.PhysicalSpan); i++ {
		if swag.IsZero(m.PhysicalSpan[i]) { // not required
			continue
		}

		if m.PhysicalSpan[i] != nil {
			if err := m.PhysicalSpan[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("physical-span" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TapiEquipmentPhysicalContext) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TapiEquipmentPhysicalContext) UnmarshalBinary(b []byte) error {
	var res TapiEquipmentPhysicalContext
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
