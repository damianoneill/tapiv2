// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TapiOduOduTcmMepPac tapi odu odu tcm mep pac
// swagger:model tapi.odu.OduTcmMepPac
type TapiOduOduTcmMepPac struct {

	// This attribute indicates the status of the accepted TCM.
	AcStatusSink TapiOduTcmStatus `json:"ac-status-sink,omitempty"`

	// This attribute indicates the status of the accepted TCM.
	AcStatusSource TapiOduTcmStatus `json:"ac-status-source,omitempty"`

	// This attribute provides the capability to provision the LOCK signal at the sink, which is one of the ODU maintenance signals. When a Tandem Connection endpoint is set to admin state locked, it will insert the ODU-LCK signal in the downstream direction.
	AdminStateSink TapiCommonAdministrativeState `json:"admin-state-sink,omitempty"`

	// This attribute provides the capability to provision the LOCK signal at the source, which is one of the ODU maintenance signals.  When a Tandem Connection endpoint is set to admin state locked, it will insert the ODU-LCK signal in the source direction.
	AdminStateSource TapiCommonAdministrativeState `json:"admin-state-source,omitempty"`

	// This attribute specifies the directionality of the ODUT MEP with respect to the associated ODU CEP. The value of TRUE means that the sink part of the ODUT MEP terminates the same signal direction as the sink part of the ODU CEP. The Source part behaves similarly. This attribute is meaningful only on objects instantiated under ODU CEP, and at least one among ODU CEP and the subordinate object is bidirectional.
	Codirectional *bool `json:"codirectional,omitempty"`

	// none
	TcmExtension TapiOduTcmExtension `json:"tcm-extension,omitempty"`

	// This attribute indicates the tandem connection monitoring field of the ODU OH.
	TcmField int32 `json:"tcm-field,omitempty"`

	// This attribute specifies the TCM mode at the entity. Valid values are: Operational, Monitor, and Transparent.
	TcmMode TapiOduTcmMode `json:"tcm-mode,omitempty"`
}

// Validate validates this tapi odu odu tcm mep pac
func (m *TapiOduOduTcmMepPac) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcStatusSink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAcStatusSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdminStateSink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdminStateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTcmExtension(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTcmMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TapiOduOduTcmMepPac) validateAcStatusSink(formats strfmt.Registry) error {

	if swag.IsZero(m.AcStatusSink) { // not required
		return nil
	}

	if err := m.AcStatusSink.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ac-status-sink")
		}
		return err
	}

	return nil
}

func (m *TapiOduOduTcmMepPac) validateAcStatusSource(formats strfmt.Registry) error {

	if swag.IsZero(m.AcStatusSource) { // not required
		return nil
	}

	if err := m.AcStatusSource.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ac-status-source")
		}
		return err
	}

	return nil
}

func (m *TapiOduOduTcmMepPac) validateAdminStateSink(formats strfmt.Registry) error {

	if swag.IsZero(m.AdminStateSink) { // not required
		return nil
	}

	if err := m.AdminStateSink.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("admin-state-sink")
		}
		return err
	}

	return nil
}

func (m *TapiOduOduTcmMepPac) validateAdminStateSource(formats strfmt.Registry) error {

	if swag.IsZero(m.AdminStateSource) { // not required
		return nil
	}

	if err := m.AdminStateSource.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("admin-state-source")
		}
		return err
	}

	return nil
}

func (m *TapiOduOduTcmMepPac) validateTcmExtension(formats strfmt.Registry) error {

	if swag.IsZero(m.TcmExtension) { // not required
		return nil
	}

	if err := m.TcmExtension.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("tcm-extension")
		}
		return err
	}

	return nil
}

func (m *TapiOduOduTcmMepPac) validateTcmMode(formats strfmt.Registry) error {

	if swag.IsZero(m.TcmMode) { // not required
		return nil
	}

	if err := m.TcmMode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("tcm-mode")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TapiOduOduTcmMepPac) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TapiOduOduTcmMepPac) UnmarshalBinary(b []byte) error {
	var res TapiOduOduTcmMepPac
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
