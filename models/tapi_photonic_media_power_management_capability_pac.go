// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TapiPhotonicMediaPowerManagementCapabilityPac tapi photonic media power management capability pac
// swagger:model tapi.photonic.media.PowerManagementCapabilityPac
type TapiPhotonicMediaPowerManagementCapabilityPac struct {

	// This parameter exposes the maximum output power supported
	//                 at the Logical-Termination-Point (LTP) associated to the SIP.
	SupportableMaximumOutputPower *TapiPhotonicMediaPowerProperties `json:"supportable-maximum-output-power,omitempty"`

	// This parameter exposes the minimum output power supported
	//                 at the Logical-Termination-Point (LTP) associated to the SIP.
	SupportableMinimumOutputPower *TapiPhotonicMediaPowerProperties `json:"supportable-minimum-output-power,omitempty"`

	// This parameter exposes the maximum input power tolerated
	//                 at the Logical-Termination-Point (LTP) associated to the SIP.
	TolerableMaximumInputPower *TapiPhotonicMediaPowerProperties `json:"tolerable-maximum-input-power,omitempty"`

	// This parameter exposes the minimum input power tolerated
	//                 at the Logical-Termination-Point (LTP) associated to the SIP.
	TolerableMinimumInputPower *TapiPhotonicMediaPowerProperties `json:"tolerable-minimum-input-power,omitempty"`
}

// Validate validates this tapi photonic media power management capability pac
func (m *TapiPhotonicMediaPowerManagementCapabilityPac) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSupportableMaximumOutputPower(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportableMinimumOutputPower(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTolerableMaximumInputPower(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTolerableMinimumInputPower(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TapiPhotonicMediaPowerManagementCapabilityPac) validateSupportableMaximumOutputPower(formats strfmt.Registry) error {

	if swag.IsZero(m.SupportableMaximumOutputPower) { // not required
		return nil
	}

	if m.SupportableMaximumOutputPower != nil {
		if err := m.SupportableMaximumOutputPower.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("supportable-maximum-output-power")
			}
			return err
		}
	}

	return nil
}

func (m *TapiPhotonicMediaPowerManagementCapabilityPac) validateSupportableMinimumOutputPower(formats strfmt.Registry) error {

	if swag.IsZero(m.SupportableMinimumOutputPower) { // not required
		return nil
	}

	if m.SupportableMinimumOutputPower != nil {
		if err := m.SupportableMinimumOutputPower.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("supportable-minimum-output-power")
			}
			return err
		}
	}

	return nil
}

func (m *TapiPhotonicMediaPowerManagementCapabilityPac) validateTolerableMaximumInputPower(formats strfmt.Registry) error {

	if swag.IsZero(m.TolerableMaximumInputPower) { // not required
		return nil
	}

	if m.TolerableMaximumInputPower != nil {
		if err := m.TolerableMaximumInputPower.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tolerable-maximum-input-power")
			}
			return err
		}
	}

	return nil
}

func (m *TapiPhotonicMediaPowerManagementCapabilityPac) validateTolerableMinimumInputPower(formats strfmt.Registry) error {

	if swag.IsZero(m.TolerableMinimumInputPower) { // not required
		return nil
	}

	if m.TolerableMinimumInputPower != nil {
		if err := m.TolerableMinimumInputPower.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tolerable-minimum-input-power")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TapiPhotonicMediaPowerManagementCapabilityPac) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TapiPhotonicMediaPowerManagementCapabilityPac) UnmarshalBinary(b []byte) error {
	var res TapiPhotonicMediaPowerManagementCapabilityPac
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
