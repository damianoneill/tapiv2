// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TapiEthEthCtpCommonPac tapi eth eth ctp common pac
// swagger:model tapi.eth.EthCtpCommonPac
type TapiEthEthCtpCommonPac struct {

	// This attribute indicates the positions (i.e., the relative order) of all the MEP, MIP, and TCS objects which are associated with the CTP.
	AuxiliaryFunctionPositionSequence []int32 `json:"auxiliary-function-position-sequence"`

	// See 802.1AX:
	//                 The value of this attribute defines the maximum delay, in tens of microseconds, that may be imposed by the Frame Collector between receiving a frame from an Aggregator Parser, and either delivering the frame to its MAC Client or discarding the frame (see IEEE 802.1AX clause 5.2.3.1.1).
	//                 range of type : 16-bit
	CollectorMaxDelay int32 `json:"collector-max-delay,omitempty"`

	// This attribute models the combination of all CSF related MI signals (MI_CSF_Enable, MI_CSFrdifdi_Enable, MI_CSFdci_Enable) as defined in G.8021.
	//                 range of type : true, false
	CsfConfig TapiEthCsfConfig `json:"csf-config,omitempty"`

	// This attribute models the MI_CSFrdifdiEnable information defined in G.8021.
	CsfRdiFdiEnable *bool `json:"csf-rdi-fdi-enable,omitempty"`

	// This attribute models the MI_CSF_Reported information defined in G.8021.
	//                 range of type : true, false
	CsfReport *bool `json:"csf-report,omitempty"`

	// This attribute models the FilterConfig MI defined in section 8.3/G.8021. It indicates the configured filter action for each of the 33 group MAC addresses for control frames. The 33 MAC addresses are:
	//                 - All bridges address: 01-80-C2-00-00-10,
	//                 - Reserved addresses: 01-80-C2-00-00-00 to 01-80-C2-00-00-0F,
	//                 - GARP Application addresses: 01-80-C2-00-00-20 to 01-80-C2-00-00-2F.
	//                 The filter action is Pass or Block.
	//                 If the destination address of the incoming ETH_CI_D matches one of the above addresses, the filter process shall perform the corresponding configured filter action.
	//                 If none of the above addresses match, the ETH_CI_D is passed.
	FilterConfig *TapiEthControlFrameFilter `json:"filter-config,omitempty"`

	// This attribute models the FilteConfig MI defined in 8.3/G.8021. It indicates the configured filter action for each of the 33 group MAC addresses for control frames. The 33 MAC addresses are:
	//                 01-80-C2-00-00-10,
	//                 01-80-C2-00-00-00 to 01-80-C2-00-00-0F, and
	//                 01-80-C2-00-00-20 to 01-80-C2-00-00-2F.
	//                 The filter action is Pass or Block.
	//                 If the destination address of the incoming ETH_CI_D matches one of the above addresses, the filter process shall perform the corresponding configured filter action.
	//                 If none of the above addresses match, the ETH_CI_D is passed.
	FilterConfigSnk []string `json:"filter-config-snk"`

	// This attribute provisions whether the SSF defect should be reported as fault cause or not.
	//                 It models the ETH-LAG_FT_Sk_MI_SSF_Reported defined in G.8021.
	IsSsfReported *bool `json:"is-ssf-reported,omitempty"`

	// This attribute models the MAC_Lenght MI defined in 8.6/G.8021 for the MAC Length Check process. It indicates the allowed maximum frame length in bytes.
	//                 range of type : 1518, 1522, 2000
	MacLength *int32 `json:"mac-length,omitempty"`

	// This attribute provisions the threshold for the number of active ports. If the number of active ports is more than zero but less than the provisioned threshold, a cPLL (Partial Link Loss) is raised. See section 9.7.1.2 of G.8021.
	//                 range of type : 0..number of ports
	PllThr int32 `json:"pll-thr,omitempty"`

	// none
	TrafficConditioningPac *TapiEthTrafficConditioningPac `json:"traffic-conditioning-pac,omitempty"`

	// none
	TrafficShapingPac *TapiEthTrafficShapingPac `json:"traffic-shaping-pac,omitempty"`

	// This attribute models the ETHx/ETH-m_A_So_MI_Vlan_Config information defined in G.8021.
	//                 range of type : -1, 0, 1..4094
	VlanConfig int32 `json:"vlan-config,omitempty"`
}

// Validate validates this tapi eth eth ctp common pac
func (m *TapiEthEthCtpCommonPac) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCsfConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilterConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrafficConditioningPac(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrafficShapingPac(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TapiEthEthCtpCommonPac) validateCsfConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.CsfConfig) { // not required
		return nil
	}

	if err := m.CsfConfig.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("csf-config")
		}
		return err
	}

	return nil
}

func (m *TapiEthEthCtpCommonPac) validateFilterConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.FilterConfig) { // not required
		return nil
	}

	if m.FilterConfig != nil {
		if err := m.FilterConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter-config")
			}
			return err
		}
	}

	return nil
}

func (m *TapiEthEthCtpCommonPac) validateTrafficConditioningPac(formats strfmt.Registry) error {

	if swag.IsZero(m.TrafficConditioningPac) { // not required
		return nil
	}

	if m.TrafficConditioningPac != nil {
		if err := m.TrafficConditioningPac.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("traffic-conditioning-pac")
			}
			return err
		}
	}

	return nil
}

func (m *TapiEthEthCtpCommonPac) validateTrafficShapingPac(formats strfmt.Registry) error {

	if swag.IsZero(m.TrafficShapingPac) { // not required
		return nil
	}

	if m.TrafficShapingPac != nil {
		if err := m.TrafficShapingPac.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("traffic-shaping-pac")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TapiEthEthCtpCommonPac) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TapiEthEthCtpCommonPac) UnmarshalBinary(b []byte) error {
	var res TapiEthEthCtpCommonPac
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
